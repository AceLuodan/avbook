function a() {
	count33 = $("#sharecnt_cnt").html();
	var ctx = this.FileUtils || this.yunData.getContext(), uk = (ctx.SHARE_DATAS ? ctx.SHARE_DATAS.currentUK
			: ctx.uk), BDSTOKEN = ctx.bdstoken, PERPAGE = 100;
	var records = [];
	var pool = (function create_pool(size) {
		var used = 0, pending = [], t;

		return {
			get : function() {
				var wait = $.Deferred(polyfill);
				used++ < size ? wait.resolve(used) : pending.push(wait);
				return wait
						.promise({
							free : function() {
								if (used > 0 && wait) {
									pending.length > 0
											&& pending.shift().resolve(used);
									used--;
									wait = null;
								}
							}
						});
			}
		}
	})(8);
	function _loop(start) {
		return $ajax({
			url : '/pcloud/feed/getsharelist',
			data : {
				auth_type : 1,
				start : start,
				limit : PERPAGE,
				query_uk : uk
			}
		}).then(function(r) {
			r.error || [].push.apply(records, r.records);
		});
	}

	var arr, start = 700;
	var sle = 0;
	for (arr = [], start = 0; start < 400; start += PERPAGE) {
		arr.push(_loop(start));
	}
	$.when
			.apply(null, arr)
			.then(
					function() {
						if (records.length) {
							records
									.forEach(function(v, i) {

										try {

											if (v['filelist'][0]['path']) {
												console
														.log(
																decodeURIComponent(v['filelist'][0]['path']),
																i);

												var cmd = {
													url : '/share/transfer?'
															+ $
																	.param({
																		from : uk,
																		shareid : v['shareid'],
																		bdstoken : BDSTOKEN,
																		ondup : 'overwrite'
																	}),
													data : {
														path : '/我的资源',
														type : 1,
														filelist : '["'
																+ decodeURIComponent(v['filelist'][0]['path'])
																+ '"]'
													},
													type : 'post',
													timeout : 9000
												};
												$ajax(cmd);
											}
										} catch (err) {
										}
									});
						}
					}).fail(function() {
			});

	function polyfill(d) {
		if (!$.isFunction(d.pipe)) {
			function chain(fnDone) {
				return $.Deferred(
						function(nd) {
							d.then(function() {
								var r = fnDone.apply(this, arguments);
								r && $.isFunction(r.promise) ? r.promise()
										.then(nd.resolve, nd.reject, nd.notify)
										: nd.resolveWith(
												this === d ? nd : this, [ r ]);
							}, function() {
								nd.rejectWith(this === d ? nd : this, [ r ])
							});
						}).promise();
			}

			var fnPromise = d.promise;
			d.promise = function() {
				return $.extend(fnPromise.apply(null, arguments), {
					pipe : chain
				});
			}
		}
		return d;
	}

	function $ajax() {
		var slot = pool.get(), args = [].slice.apply(arguments);
		return slot.pipe(function() {
			return $.ajax.apply(null, args).done(slot.free).fail(slot.free);
		});
	}
}
a();